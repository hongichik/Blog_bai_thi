<h1>Bài 6: Các kiểu biến trong Java</h1><p class="ql-align-justify">Chương này, chúng ta cùng tìm hiểu về các kiểu biến trong Java. Biến là tên một khu nhớ. Có ba kiểu biến: biến cục bộ (còn gọi là biến local), thuộc tính (biến của instance- đối tượng) và biến static.</p><p class="ql-align-justify">Bạn phải khai báo tất cả các biến trước khi chúng có thể được sử dụng. Form cơ bản của một khai báo biến như sau:</p><pre class="ql-syntax" spellcheck="false">kieu_du_lieu bien [ = giatri][, bien [= giatri] ...] ;
</pre><p class="ql-align-justify">Ở đây,&nbsp;<em>kieu_du_lieu</em>&nbsp;là một kiểu dữ liệu của Java và&nbsp;<em>bien</em>&nbsp;là tên của biến. Để khai báo nhiều hơn một biến với kiểu cụ thể, bạn có thể sử dụng một danh sách biến phân biệt nhau bởi dấu phảy.</p><p class="ql-align-justify">Dưới đây là ví dụ về khai báo và khởi tạo biến hợp lệ trong Java:</p><pre class="ql-syntax" spellcheck="false">int a, b, c;         // Khai bao ba bien kieu int la a, b, và c.
int a = 5, b = 7;  // Vi du ve khoi tao bien
byte A = 11;         // Khoi tao mot bien kieu byte ten la A.
double pi = 3.14159; // Khai bao va gan mot gia tri cua PI.
char nam = 'b';        // Bien nam duoc khoi tao voi gia tri 'a'.
</pre><h2>Biến local trong Java</h2><p class="ql-align-justify">Các biến được khai báo trong các phương thức, constructor, hoặc khối.</p><p class="ql-align-justify">Các biến được tạo khi phương thức, constructor hoặc khối được nhập và biến bị hủy khi phương thức, constructor hoặc khối kết thúc.</p><p class="ql-align-justify">Chỉ định truy cập (access modifier) có thể không được sử dụng cho các biến local.</p><p class="ql-align-justify">Các biến local chỉ nhìn thấy trong phương thức, constructor, hoặc khối được khai báo.</p><p class="ql-align-justify">Các biến local được thực thi nội bộ.</p><p class="ql-align-justify">Không có giá trị mặc định nào cho các biến local, vì thế các biến local nên được khai báo và một giá trị khởi tạo nên được gán trước khi sử dụng.</p><h2>Thuộc tính (hay biến instance) trong Java</h2><p class="ql-align-justify">Các thuộc tính được khai báo trong một lớp, nhưng ở bên ngoài một phương thức, constructor hoặc bất kỳ khối nào.</p><p class="ql-align-justify">Khi một không gian nhớ được cấp phát cho một đối tượng trong một heap (một dạng cấu trúc hàng đợi có thứ tự ưu tiên), một slot cho mỗi giá trị thuộc tính được tạo ra.</p><p class="ql-align-justify">Các thuộc tính được tạo khi một đối tượng được tạo bởi sử dụng từ khóa new và bị hủy khi đối tượng bị hủy.</p><p class="ql-align-justify">Các thuộc tính giữ các giá trị mà phải được tham chiếu bởi nhiều hơn một phương thức, constructor hoặc khối, hoặc các phần chủ yếu của trạng thái đối tượng mà phải có mặt xuyên suốt lớp đó.</p><p class="ql-align-justify">Các thuộc tính có thể được khai báo trong mức độ lớp trước hoặc sau khi sử dụng.</p><p class="ql-align-justify">Chỉ định truy cập (access modifier) có thể được cung cấp cho các thuộc tính.</p><p class="ql-align-justify">Các thuộc tính là nhìn thấy với tất cả các phương thức, constructor, và khối trong lớp. Tuy nhiên, tính nhìn thấy cho các lớp phụ có thể được cung cấp cho những biến này với sự sử dụng của chỉ định truy cập.</p><p class="ql-align-justify">Các thuộc tính có các giá trị mặc định. Với các số, giá trị mặc định là 0, với Boolean là false và với đối tượng là null. Các giá trị có thể được gán trong khi khai báo hoặc trong constructor.</p><p class="ql-align-justify">Các thuộc tính có thể được truy cập một cách trực tiếp bởi việc gọi tên biến bên trong lớp đó. Tuy nhiên, với các phương thức static và các lớp khác nhau (khi thuộc tính được cung cấp khả năng truy cập), nó nên được gọi bởi sử dụng tên đầy đủ hợp lệ như sau:&nbsp;<em>ObjectReference.VariableName</em>.</p><h2>Các biến Class/static trong Java:</h2><p class="ql-align-justify">Các biến class cũng được biết như là các biến static được khai báo với từ khóa static trong một lớp, nhưng ở bên ngoài một phương thức, constructor hoặc một khối.</p><p class="ql-align-justify">Sẽ chỉ có một bản sao của mỗi biến class cho mỗi lớp, bất chấp việc bao nhiêu đối tượng được tạo từ nó.</p><p class="ql-align-justify">Các biến static hiếm khi được sử dụng, ngoài việc được khai báo như là các hằng số. Các hằng số là các biến, mà được khai báo như là các biến static, biến final, biến chung/riêng. Các biến hằng số không bao giờ thay đổi từ giá trị khởi tạo của chúng.</p><p class="ql-align-justify">Các biến static được lưu giữ trong bộ nhớ static.</p><p class="ql-align-justify">Các biến static được tạo khi chương trình bắt đầu và bị hủy khi chương trình kết thúc.</p><p class="ql-align-justify">Tính nhìn thấy là tương tự như các thuộc tính. Tuy nhiên, hầu hết biến static được khai báo chung khi chúng phải là có sẵn cho việc sử dụng của lớp.</p><p class="ql-align-justify">Giá trị mặc định là giống với các thuộc tính. Với các số, giá trị mặc định là 0; với Boolean là false, và với đối tượng là null. Các giá trị có thể được gán trong khi khai báo hoặc trong constructor. Ngoài ra, các giá trị có thể được gán trong các khối khởi tạo static đặc biệt.</p><p class="ql-align-justify">Các biến static có thể được truy cập bởi việc gọi tên lớp:&nbsp;<em>ClassName.VariableName</em>.</p><p class="ql-align-justify">Khi khai báo các biến class như public static final, thì các tên biến ở dạng chữ hoa. Nếu các biến static không là public và final, thì cú pháp đặt tên giống với các biến local và thuộc tính.</p><p><br></p><p class="ql-align-center"><br></p><p><br></p>