<h1>Bài 3: Kiểu dữ liệu trong C/C++</h1><p class="ql-align-justify">iểu dữ liệu trong C/C++Trong khi làm việc với bất kỳ ngôn ngữ lập trình nào, bạn cần sử dụng các kiểu biến đa dạng để lưu giữ thông tin. Các biến, không gì khác ngoài các vị trí bộ nhớ được dành riêng để lưu giá trị. Nghĩa là, khi bạn tạo một biến, bạn dành riêng một số không gian trong bộ nhớ cho biến đó.</p><p class="ql-align-justify">Bạn có thể thích lưu thông tin của các kiểu dữ liệu (Data Type) đa dạng như Character, Wide Character, integer, floating-point, double floating point, Boolean, …. Dựa trên kiểu dữ liệu của một biến, hệ thống sẽ cấp phát bộ nhớ và quyết định những gì có thể được lưu giữ trong bộ nhớ dành riêng đó.</p><h2>Kiểu dữ liệu nguyên thủy trong C/C++</h2><p class="ql-align-justify">Tên tiếng Anh là Primitive Type, còn có thể gọi là kiểu dữ liệu gốc, kiểu dữ liệu có sẵn trong C/C++. Bên cạnh các kiểu dữ liệu gốc này, C/C++ cũng cung cấp các kiểu dữ liệu user-defined. Bảng dưới đây liệt kê 7 kiểu dữ liệu cơ bản trong C/C++</p><p class="ql-align-justify">Một số kiểu cơ bản có thể được sửa đổi bởi sử dụng một hoặc nhiều modifier này:</p><ul><li class="ql-align-justify">signed (kiểu có dấu)</li><li class="ql-align-justify">unsigned (kiểu không có dấu)</li><li class="ql-align-justify">short</li><li class="ql-align-justify">long</li></ul><p><span style="color: rgb(0, 0, 0);">Kích cỡ của các biến có thể khác với những gì hiển thị trên bảng, phụ thuộc vào compiler và máy tính bạn đang sử dụng.</span></p><h2><span class="ql-cursor">﻿﻿﻿</span>Khai báo typedef trong C/C++</h2><p class="ql-align-justify">Bạn có thể tạo một tên mới cho một kiểu dữ liệu đang tồn tại bởi sử dụng&nbsp;typedef&nbsp;trong C/C++. Cú pháp đơn giản sau để định nghĩa một kiểu dữ liệu mới bởi sử dụng typedef:</p><pre class="ql-syntax" spellcheck="false">typedef kieu_du_lieu ten_moi; 
</pre><p><br></p>