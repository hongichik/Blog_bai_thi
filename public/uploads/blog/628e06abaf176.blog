<h1>Bài 1: For trong C++</h1><p>For trong C++ là vòng lặp giúp&nbsp;<strong>lặp lại các xử lý trong chương trình với một số lần cụ thể</strong>. Khác với các ngôn ngữ như Python vốn sử dụng vòng lặp for để lặp số lần đúng bằng số phần tử có trong đối tượng đã chỉ định, thì for trong C++ lại dùng tới một&nbsp;<strong>biến đếm</strong>&nbsp;để&nbsp;<strong>quyết định số lần lặp trong vòng lặp</strong>. Và bằng cách sử dụng các&nbsp;<strong>biểu thức xử lý</strong>&nbsp;biến đếm trong hàm for, chúng ta sẽ tự do hơn khi chỉ định số lần lặp trong C++ so với các ngôn ngữ khác.</p><p>Chúng ta sử dụng&nbsp;<strong>vòng lặp for trong C++</strong>&nbsp;với cú pháp như sau:</p><p>for (<code style="background-color: rgb(249, 242, 244); color: rgb(51, 51, 51);">biểu thức khởi tạo</code>&nbsp;<code style="background-color: rgb(249, 242, 244); color: rgb(51, 51, 51);">;</code>&nbsp;<code style="background-color: rgb(249, 242, 244); color: rgb(51, 51, 51);">biểu thức điều kiện</code>&nbsp;<code style="background-color: rgb(249, 242, 244); color: rgb(51, 51, 51);">;</code>&nbsp;<code style="background-color: rgb(249, 242, 244); color: rgb(51, 51, 51);">biểu thức thay đổi</code>&nbsp;) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;Câu lệnh 1 trong khối for&nbsp;<code style="background-color: rgb(249, 242, 244); color: rgb(51, 51, 51);">;</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp;Câu lệnh 2 trong khối for&nbsp;<code style="background-color: rgb(249, 242, 244); color: rgb(51, 51, 51);">;</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp;…</p><p>}</p><p>Trong đó:</p><ul><li><strong>Biểu thức khởi tạo</strong>&nbsp;là biểu thức đầu tiên được thực thi khi câu lệnh for được thực thi. Nó chủ yếu được sử dụng để khởi tạo các&nbsp;<em>biến đếm</em>&nbsp;được sử dụng trong biểu thức điều kiện.</li><li><br></li><li><strong>Biểu thức điều kiện</strong>&nbsp;là biểu thức sử dụng để quyết định có thực thi các câu lệnh được miêu tả bên trong&nbsp;<strong>khối for</strong>&nbsp;hay không. Nếu&nbsp;<em>biểu thức điều kiện</em>&nbsp;được đánh giá là&nbsp;<em>true</em>&nbsp;(đúng), thì các câu lệnh được mô tả bên trong khối for được nằm giữa cặp dấu&nbsp;<code style="background-color: rgb(249, 242, 244); color: rgb(51, 51, 51);">{}</code>&nbsp;sẽ được thực thi theo thứ tự từ trên xuống. Và nếu&nbsp;<em>false</em>&nbsp;(sai), quá trình lặp được kết thúc.</li><li><br></li><li><strong>Biểu thức thay đổi</strong>&nbsp;là biểu thức biến đối giá trị của&nbsp;<em>biến đếm</em>. Sau mỗi lần vòng lặp được thực thi,&nbsp;<em>biến đếm</em>&nbsp;sẽ được thay đổi thông qua&nbsp;<em>Biểu thức thay đổi</em>&nbsp;dẫn đến kết quả&nbsp;<em>Biểu thức điều kiện</em>&nbsp;cũng sẽ thay đổi. Và&nbsp;<em>Biểu thức điều kiện</em>&nbsp;sẽ được đánh giá lại, để quyết định sẽ tiếp tục hay kết thúc vòng lặp.</li></ul><h2><strong>Vòng lặp for rút gọn trong C++</strong></h2><p>Trong một vài trường hợp đặc biệt, chúng ta có thể lược bỏ các thành phần không dùng đến và rút gọn vòng lặp for trong C++.</p><h3><strong>Lược bỏ cặp dấu ngoặc nhọn</strong></h3><p>Nếu chỉ có một câu lệnh duy nhất trong khối lệnh của for, chúng ta có thể lược bỏ cặp dấu&nbsp;<code style="background-color: rgb(249, 242, 244); color: rgb(51, 51, 51);">{}</code>&nbsp;và rút gọn vòng lặp for trong C++ như sau:</p><p>COPY</p><pre class="ql-syntax" spellcheck="false">for (int i = 1; i &lt; 3; i++)
    cout &lt;&lt; "hello " &lt;&lt; i &lt;&lt;endl;
</pre><p>Chúng ta cũng có thể viết các lệnh trên cùng một dòng như sau:</p><p>COPY</p><pre class="ql-syntax" spellcheck="false">for (int i = 1; i &lt; 3; i++) cout &lt;&lt; "hello " &lt;&lt; i &lt;&lt;endl;
</pre><h3><strong>Lược bỏ biểu thức khởi tạo</strong></h3><p>Nếu chúng ta đã khởi tạo biến đếm ở ngoài vòng lặp for thì biểu thức khởi tạo có thể được rút gọn. Ví dụ như sau:</p><p>COPY</p><pre class="ql-syntax" spellcheck="false">int i = 0;
for (; i &lt; 2; i++){
  cout &lt;&lt; "i=" &lt;&lt; i &lt;&lt;endl;
}
</pre><p>Với vòng lặp for trên, do biến&nbsp;<em>i</em>&nbsp;đã được khởi tạo trước for, nên chúng ta có thể rút gọn việc khởi tạo biến đếm này, và kết quả chương trình sẽ như sau:</p><p>COPY</p><pre class="ql-syntax" spellcheck="false">i=0
i=1
</pre><p>Lưu ý là mặc dù rút gọn biểu thức khởi tạo, nhưng dấu&nbsp;<code style="background-color: rgb(249, 242, 244); color: rgb(51, 51, 51);">;</code>&nbsp;vẫn cần được viết nhé.</p><h3><strong>Lược bỏ biểu thức điều kiện</strong></h3><p>Trong trường hợp không cần thiết phải kiểm tra điều kiện để kết thúc vòng lặp, chúng ta có thể lược bỏ biểu thức điều kiện, và tạo ra một&nbsp;<strong>vòng lặp vô hạn trong C++</strong>.</p><p>Lưu ý trong trường hợp này, để có thể thoát vòng lặp vô hạn, chúng ta cần phải ghi thêm một lệnh break bên trong xử lý của vòng lặp. Ví dụ cụ thể:</p><p>COPY</p><pre class="ql-syntax" spellcheck="false">int sum = 0;

for (int i = 1; ; i++){
  sum += i;
  if (sum &gt; 5){
    break;
  }
}
cout &lt;&lt; "sum = " &lt;&lt; sum;

//sum = 6
</pre><p>Với vòng lặp này, mặc dù không tồn tại biểu thức điều kiện, nhưng với câu lệnh break được thực thi khi giá trị tổng&nbsp;<em>sum</em>&nbsp;lớn hơn 5, chúng ta vẫn có thể kết thúc vòng lặp tại vị trí mong muốn.</p><p><br></p>