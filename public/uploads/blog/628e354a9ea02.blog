<h1>Lập trình hướng đối tượng oop</h1><p>1. Định nghĩa</p><p>OOP&nbsp;là viết tắt của&nbsp;Object-Oriented Programming&nbsp;dịch ra là lập trình hướng đối tượng. Lập trình hướng đối tượng là kỹ thuật, phương pháp lập trình sử dụng các đối tượng (objects) để xây dựng ứng dụng. Hầu hết các ngôn ngữ như: C#, Java, PHP, Ruby… đều hỗ trợ lập trình hướng đối tượng.</p><p>Lưu ý:</p><p><br></p><ul><li>Lập trình hướng đối tượng (OOP) là một kỹ thuật, phương pháp lập trình và mỗi lập trình viên sẽ có cách triển khai, áp dụng khác nhau tùy vào từng dự án, tùy vào kinh nghiệm.</li><li>Ngoài ra không bắt buộc phải áp dụng OOP vào dự án, có thể dùng lập trình hướng hàm cấu trúc (Procedure Oriented Programming – POP) hay các phương pháp khác.</li></ul><p>2. Lợi ích</p><p>Như ở giới thiệu ở phần 1, ngoài OOP ra còn có các phương pháp lập trình khác. Vậy tại sao OOP lại được ưa chuộng và phổ biến trong lập trình?</p><p>OOP có các lợi ích sau:</p><p><br></p><ul><li>Cách tiếp cận oop rất thực tế. Dễ mô hình hóa các bài toán, các đối tượng bên ngoài đời sống thành mã code.</li></ul><p>Ví dụ như ngoài đời thực bán có thực thể lập trình viên, có các hành động lấy yêu cầu, viết code, deploy sản phẩm. Ta có thể tạo ra class&nbsp;Developer&nbsp;với các methods:&nbsp;AnalyzeRequirement,&nbsp;WriteCode,&nbsp;Deploy&nbsp;tương ứng.</p><p><br></p><ul><li>Dễ bảo trì, dễ mở rộng và code nhìn gọn gòn sạch hơn. Về ưu điểm này thì sau khi đi qua các tính chất của&nbsp;OOP&nbsp;ở phần tiếp theo các bạn sẽ hiểu rõ hơn.</li></ul><p>Lưu ý:&nbsp;Việc áp dụng OOP có giúp clean code, dễ reuse, dễ scale hay không còn tùy thuộc vào kinh nghiệm và tư duy áp dụng kỹ thuật OOP của mỗi người. Cùng 1 kỹ thuật sẽ có các cách làm tốt, chưa tốt khác nhau.</p><p>3. Class và Object</p><p><span style="color: rgb(41, 41, 41);">Trong OOP,&nbsp;Class&nbsp;là 1 kiểu dữ liệu, 1 khuôn mẫu giúp mô hình hóa các đối tượng thực tế.&nbsp;Class&nbsp;sẽ có các thuộc tính (properties) và các phương thức (methods) tương ứng với thuộc tính và hành động thực tế bên ngoài.</span></p><p>Nếu ta coi&nbsp;Class&nbsp;là 1 khuôn mẫu thì&nbsp;Object(đối tượng) là 1 thể hiện được tạo ra từ khuôn mẫu đó.</p><p>Ví dụ:&nbsp;Lớp (Class)&nbsp;sẽ có các thể hiện là các&nbsp;Đối tượng(Object)&nbsp;như: BackendDeveloper, FrontendDeveloper, FullStackDeveloper.</p><p>Tiêp theo chúng ta sẽ cùng nhau tìm hiểu 4 tính chất của lập trình hướng đối tượng (OOP).</p><p>4. Tính đóng gói (Encapsulation)</p><p>Tính đóng gói (Encapsulation)&nbsp;hay còn gọi là&nbsp;hiding information&nbsp;giúp gom nhóm lại các thuộc tính (properties), phương thức (methods) và nhiều thành phần khác thành một đối tượng hay một đơn vị.</p><p>Tính đóng gói được triển khai bằng cách sử dụng&nbsp;access modifier: public, private, protected, internal.</p><p><br></p><ul><li>public: Có thể truy cập từ bất cứ đâu</li><li>private: Chỉ có thể truy cập ở bên trong class</li><li>protected: Chỉ có thể truy cập ở bên trong class và các class kế thừa từ class đó</li><li>internal: Giống như public nhưng chỉ hạn chế trong 1&nbsp;assembly.</li></ul><p>Giải thích về intenal:&nbsp;Hiểu đơn giản là ta có 1 ứng dụng U gọi 1 thư viện bên ngoài L. Trong thư viện L này có class C khai báo internal. Các class khác trong thư viện L này có thể truy cập class C này nhưng ứng dụng U thì không thể do khác assembly.</p><p><span style="color: rgb(41, 41, 41);">5. Tính kế thừa (Inheritance)</span></p><p><span style="color: rgb(41, 41, 41);">Tính kế thừa cho phép tạo ra 1 class con từ 1 class có sẵn và mở rộng class đó. Các class con có thể kế thừa lại các thuộc tính (properties) và phương thức (methods) của class cha, có thể không cần định nghĩa lại các phương thức hoặc tái định nghĩa (override) hoặc thêm các phương thức sử dụng riêng ở lớp con. Tính chất này giúp tái sử dụng, tận dụng mã nguồn có sẵn.</span></p><p><span style="color: rgb(41, 41, 41);">6. Tính đa hình (Polymorphism)</span></p><p>Tính đa hình cho phép một hành động có thể được thực hiện bằng nhiều cách khác nhau.</p><p>Có 2 cách vận dụng tính đa hình:</p><ul><li>Method&nbsp;overloading(đa hình khi biên dịch(compile time)): Trong 1 lớp (class) các phương thức (methods) có cùng tên nhưng kiểu trả về và tham số truyền vào khác nhau (số lượng, kiểu)</li><li>Method&nbsp;overriding(đa hình ở thời điểm thực thi(runtime)): Các phương thức được thực hiện ở các lớp con kế thừa từ lớp cha (base class). Nội dung thực hiện bên trong mỗi lớp khác nhau tùy vào logic nghiệp vụ. Chỉ khi nào runtime ta mới biết được đối tượng sẽ sử dụng phương thức nào.</li></ul><p>7. Tính trừu tượng (Abstraction)</p><p>So với 3 tính chất trên thì tính trừu tượng để giải thích hơi khó hiểu 1 tí bởi vì rất trừu tượng. ^^</p><p>Tính trừu tượng cho phép tổng quát hóa một đối tượng. Nghĩa là ẩn đi những thông tin chi tiết bên trong, chỉ thể hiện ra những thông tin bên ngoài. Và nhìn vào thông tin bên ngoài đó ta có thể hiểu được đối tượng đó làm gì.</p><p>Tính chất này được thể hiện qua việc sử dụng&nbsp;interface&nbsp;hoặc&nbsp;abstract class&nbsp;.</p><p>Lưu ý:&nbsp;Câu thần chú&nbsp;Abstraction&nbsp;-&nbsp;Ẩn chi tiết, thể hiện tổng quan.</p><p>Tổng kết:&nbsp;Qua bài này chúng ta đã cùng nhau tìm hiểu cơ bản về lập trình hướng đối tượng, các tính chất và ví dụ code demo. Lý thuyết lập trình OOP đều giống nhau nhưng tùy vào kinh nghiệm, tư duy mà mỗi lập trình viên sẽ có cách hiểu, cách triển khai khác nhau. Hy vọng bài viết này sẽ giúp ích cho những bạn mới tiếp cận lập trình hướng đối tượng OOP.</p><p>Nếu có câu hỏi hay vấn đề muốn thảo luận trao đổi thì hãy comment dưới bài viết nhé. Hy vọng được thảo luận cùng anh em.</p>